--Data Exploration Summary

--Check for row counts 
SELECT COUNT(*) AS row_count
FROM health.user_logs;

--Check for duplicates and record frequency 
SELECT
  id,
  log_date,
  measure,
  measure_value,
  systolic,
  diastolic,
  COUNT(*) AS frequency
FROM health.user_logs
GROUP BY 
  id,
  log_date,
  measure,
  measure_value,
  systolic,
  diastolic;
  
--Single column frequency counts 
SELECT 
  measure,
  COUNT(*) AS frequency,
  ROUND(
    100 * COUNT(*) / SUM(COUNT(*)) OVER (),
    2
  ) AS percentage
FROM health.user_logs
GROUP BY measure
ORDER BY frequency DESC;

--Summary Statistics
SELECT 
  'weight' AS measure,
  ROUND(MIN(measure_value), 2) AS minimum_value,
  ROUND(MAX(measure_value), 2) AS maximum_value,
  ROUND(AVG(measure_value), 2) AS avg_value,
  ROUND(
    CAST(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY measure_value) AS NUMERIC),
    2
  ) AS median_value,
  ROUND(
    MODE() WITHIN GROUP (ORDER BY measure_value),
    2
  ) AS mode_value,
  ROUND(STDDEV(measure_value), 2) AS standard_deviation,
  ROUND(VARIANCE(measure_value), 2) AS variance_value
FROM health.user_logs
WHERE measure = 'weight';


--Check Cumulative Distributions 
WITH percentile_values AS (
  SELECT 
    measure_value,
    NTILE(100) OVER  (
      ORDER BY 
        measure_value
    ) AS percentile
  FROM health.user_logs
  WHERE measure = 'weight'
)
SELECT 
  percentile,
  MIN(measure_value) AS floor_value,
  MAX(measure_value) AS ceiling_vlaue,
  COUNT(*) AS percentile_counts
FROM percentile_values 
GROUP BY percentile
ORDER BY percentile;

--Investigate outliers at ends 
--Large Outliers Investigation
WITH percentile_values AS (
  SELECT 
    measure_value,
    NTILE(100) OVER (
      ORDER BY 
        measure_value
    ) AS percentile
  FROM health.user_logs
  WHERE measure = 'weight'
)

SELECT 
  measure_value,
  RANK () OVER (ORDER BY measure_value DESC) AS rank_order,
  ROW_NUMBER () OVER (ORDER BY measure_value DESC) AS row_number_order,
  DENSE_RANK () OVER (ORDER BY measure_value DESC) AS dense_rank_order
FROM percentile_values
WHERE percentile = 100
ORDER BY percentile DESC;

--Small Outlier Investigation
WITH percentile_values AS (
  SELECT 
    measure_value,
    NTILE(100) OVER (
      ORDER BY 
        measure_value
    ) AS percentile
  FROM health.user_logs
  WHERE measure = 'weight'
)

SELECT 
  measure_value,
  RANK () OVER (ORDER BY measure_value) AS rank_order,
  ROW_NUMBER () OVER (ORDER BY measure_value) AS row_number_order,
  DENSE_RANK () OVER (ORDER BY measure_value) AS dense_rank_order
FROM percentile_values
WHERE percentile = 1
ORDER BY percentile DESC;

--Removing the Outliers and create temp table
DROP TABLE IF EXISTS clean_weight_logs;

CREATE TEMP TABLE clean_weight_logs AS (
  SELECT * 
  FROM health.user_logs
  WHERE measure = 'weight'
    AND measure_value > 0 
    AND measure_value < 201
);

--Frequency Distribution
SELECT 
  WIDTH_BUCKET(measure_value, 0, 200, 50) AS bucket,
  AVG(measure_value) AS measure_value,
  COUNT(*) AS frequency
FROM health.user_logs
WHERE measure = 'weight'
GROUP BY bucket
ORDER BY bucket;